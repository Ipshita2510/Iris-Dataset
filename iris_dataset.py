# -*- coding: utf-8 -*-
"""iris_dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F_jV5gQDDio3uofXjjWwBUh8nFUyv481
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

df = pd.read_csv("iris.csv")
df

df.head()

# checking column name
print(df.columns)

# checking unique values in the columns
print(df.nunique())

#checking missing values
print(df.isnull().sum())

# to see patterns between input and target
# setosa is easier for the model, b/c its easily separable

sns.pairplot(df, hue = "species") #plotpairwise

# co relation heatmap
correlation = df.drop('species', axis=1).corr()  #dropping b/c this only works on input features
sns.heatmap(correlation, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Feature Correlation Heatmap")
plt.show

# box plot, helps u find outliers
plt.figure(figsize=(10,6))
sns.boxplot(x="species", y="sepal_length", data=df)
plt.title("Box plot of sepal length by species")
plt.show()

# classification problem, species = target
X=df.drop("species", axis=1)
y=df["species"]

# train, test split the data
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)

# logsitic regression b/c of multi-class classification problem

model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)

y_pred= model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')
print(classification_report(y_test, y_pred))